<div class="card">
    <div class="card-header">
        @Value.GetHeading()
        <div class="float-right small text-muted">
            @Value.Id
        </div>
    </div>
    <div class="card-body">
        @if (Value is NodeModelTranslate nmt)
        {
            <NodeTranslate Value="nmt" ValueChanged="TranslateValueChanged" />
        }
        else if (Value is NodeModelRotate nmr)
        {
            <NodeRotate Value="nmr" ValueChanged="RotateValueChanged" />
        }
        else
        {
            <p>Error: Unknown node type: @(Value.GetType().Name)</p>
        }
    </div>
    <div class="card-footer p-1">
        <div class="float-right">
            <button class="btn btn-danger" @onclick="OnRemoveClick">&times;</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public NodeModel Value { get; set; }

    [Parameter]
    public EventCallback<NodeModel> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<NodeModel> OnRemove { get; set; }

    private Task OnRemoveClick(MouseEventArgs e)
    {
        return OnRemove.InvokeAsync(Value);
    }

    private Task TranslateValueChanged(NodeModelTranslate nmt)
    {
        Console.WriteLine($"TranslateValueChanged: {nmt.ToString()}");
        return ValueChanged.InvokeAsync(nmt);
    }

    private Task RotateValueChanged(NodeModelRotate nmr)
    {
        Console.WriteLine($"RotateValueChanged: {nmr.ToString()}");
        return ValueChanged.InvokeAsync(nmr);
    }
}
